#BlueJ class context
comment0.params=
comment0.target=Utilizadores()
comment0.text=\n\ Constructor\ for\ objects\ of\ class\ Utilizadores\n
comment1.params=utilizadores
comment1.target=Utilizadores(java.util.HashMap)
comment10.params=email
comment10.target=Utilizador\ get(java.lang.String)
comment11.params=u
comment11.target=boolean\ existe(Utilizador)
comment11.text=\n\ \ Verifica\ se\ existe\ o\ utilizador\n
comment12.params=email
comment12.target=boolean\ existe(java.lang.String)
comment13.params=
comment13.target=Utilizadores\ clone()
comment14.params=obj
comment14.target=boolean\ equals(java.lang.Object)
comment2.params=u
comment2.target=Utilizadores(Utilizadores)
comment3.params=
comment3.target=java.util.HashMap\ getUtilizadores()
comment4.params=utilizadores
comment4.target=void\ setUtilizadores(java.util.HashMap)
comment5.params=u
comment5.target=void\ add(Utilizador)
comment5.text=\n\ \ Adiciona\ um\ utilizador\n
comment6.params=email1\ email2
comment6.target=void\ addAmizade(java.lang.String,\ java.lang.String)
comment6.text=\n\ Adiciona\ como\ amigos\ os\ dois\ utilizadores,\ actualizando\ os\ respectivos\ perfis\n\ \n\ \ \n
comment7.params=cache\ acontecimento
comment7.target=void\ descobertaCache(Cache,\ java.lang.String)
comment7.text=\n\ \ Gera\ e\ adiciona\ uma\ actividade\ de\ descoberta\ ao\ utilizador\n
comment8.params=email1\ email2
comment8.target=void\ removeAmizade(java.lang.String,\ java.lang.String)
comment8.text=\n\ Remove\ o\ estatuto\ de\ amigos\ em\ ambos\ os\ perfis\n
comment9.params=u
comment9.target=void\ remove(Utilizador)
comment9.text=\n\ \ Remove\ um\ utilizador\n
numComments=15
